name: Neo-Backup

on:
  push:
    paths: .github/workflows/neo-backup.yml
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      NDK_CCACHE: ${{ github.workspace }}/ccache
    steps:

    - name: Download neo-backup's source code
      uses: actions/checkout@main
      with:
        repository: NeoApplications/neo-backup

    - name: Install dependencies
      run: |
        wget https://github.com/patrickfav/uber-apk-signer/releases/download/v1.2.1/uber-apk-signer-1.2.1.jar -O uber-apk-signer.jar
        echo "47ae984df200afbae292d6f950e517afb445d3c902a1edc7717a82c513c5e772 uber-apk-signer.jar" | sha256sum -c

    - name: Setup Java JDK
      uses: actions/setup-java@main
      with:
        java-version: 11
        distribution: temurin
        check-latest: true
        cache: gradle

    - name: Cache NDK licenses
      id: licenses-cache
      uses: actions/cache@main
      with:
        path: ${{ github.workspace }}/ndk/licenses
        key: licenses-${{ github.sha }}
        restore-keys: licenses-

    - name: Install the android NDK
      if: steps.licenses-cache.outputs.cache-hit != 'true'
      run: |
        mkdir -p "${ANDROID_HOME}"
        curl https://dl.google.com/android/repository/commandlinetools-linux-8092744_latest.zip -o ${{ GITHUB.WORKSPACE }}/sdk.zip
        unzip -d "${ANDROID_HOME}/cmdline-tools/" sdk.zip
        mv "${ANDROID_HOME}/cmdline-tools/cmdline-tools" "${ANDROID_HOME}/cmdline-tools/latest"
        rm ${{ GITHUB.WORKSPACE }}/sdk.zip
        echo 'export PATH="${PATH}:${ANDROID_HOME}/cmdline-tools/latest/bin"' | tee -a ~/.bashrc
        source ~/.bashrc
        yes | ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --licenses --sdk_root="${ANDROID_HOME}"

    - name: Build Neo-Backup
      run: |
        ./gradlew --no-daemon build -x lint -x lintdebug

    - name: Sign the APKs
      run: |
        echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > keystore.jks
        java -jar uber-apk-signer.jar --apks app/build/outputs/apk/neo/*.apk --ks keystore.jks --ksAlias ${{ secrets.ANDROID_KEYSTORE_ALIAS }} --ksKeyPass ${{ secrets.ANDROID_KEYSTORE_PASSWORD }} --ksPass ${{ secrets.ANDROID_KEYSTORE_PASSWORD }} -o signed/
        java -jar uber-apk-signer.jar --apks app/build/outputs/apk/release/*.apk --ks keystore.jks --ksAlias ${{ secrets.ANDROID_KEYSTORE_ALIAS }} --ksKeyPass ${{ secrets.ANDROID_KEYSTORE_PASSWORD }} --ksPass ${{ secrets.ANDROID_KEYSTORE_PASSWORD }} -o signed/

    - name: Remove Keystore
      if: always()
      run: rm -f keystore.jks

    - name: Upload signed APKs
      uses: actions/upload-artifact@main
      with:
        name: signed
        if-no-files-found: error
        path: |
          signed/

  upload:
    name: Upload
    runs-on: ubuntu-latest
    needs: build
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
    steps:

    - name: Download a Build Artifact
      uses: actions/download-artifact@main
      with:
        name: signed
        path: signed/

    - name: Get APK size
      id: size
      run: echo "::set-output name=num::$(du app-neo-aligned-signed.apk | cut -c1-7 | xargs)"

    - name: Upload the small APK to Telegram
      if: steps.size.outputs.num < '50000'
      run: curl -F document=@"signed/app-neo-aligned-signed.apk" https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendDocument?chat_id=${{ secrets.TELEGRAM_CHAT_ID }}

    - name: Install dependencies
      if: steps.size.outputs.num > '50000'
      run: |
        sudo apt-get update || sudo apt-get update
        sudo apt-get install -y ccache gperf cmake

    - name: Cache ccache
      if: steps.size.outputs.num > '50000'
      id: ccache-cache
      uses: actions/cache@main
      with:
        path: ${{ github.workspace }}/.ccache
        key: ccache-${{ github.sha }}
        restore-keys: ccache-

    - name: Setup ccache
      if: steps.size.outputs.num > '50000'
      run: |
        sudo /usr/sbin/update-ccache-symlinks
        echo 'export PATH="/usr/lib/ccache:$PATH"' | tee -a ~/.bashrc
        echo 'export CCACHE_EXEC=/usr/bin/ccache' | tee -a ~/.bashrc
        echo 'export USE_CCACHE=1' | tee -a ~/.bashrc
        source ~/.bashrc

    - name: Checkout Telegram bot API
      if: steps.size.outputs.num > '50000'
      uses: actions/checkout@main
      with:
        repository: tdlib/telegram-bot-api
        submodules: recursive
        clean: false

    - name: Compile the Telegram bot API
      if: steps.size.outputs.num > '50000'
      run: |
        mkdir -p build
        pushd build
        cmake -DCMAKE_BUILD_TYPE=Release ..
        cmake --build . --target install
        popd

    - name: Upload the signed APKs to Telegram
      if: steps.size.outputs.num > '50000'
      run: |
        telegram-bot-api --api-id=${{ secrets.TELEGRAM_API_ID }} --api-hash=${{ secrets.TELEGRAM_API_HASH }} &
        curl -F document=@"signed/app-neo-aligned-signed.apk" http://localhost:8081/bot${{ secrets.TELEGRAM_TOKEN }}/sendDocument?chat_id=${{ secrets.TELEGRAM_CHAT_ID }}
