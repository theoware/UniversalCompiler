name: My-Expenses

on:
  schedule:
  - cron: "0 1  * * 0"
  push:
    paths: .github/workflows/my-expenses.yml

  workflow_dispatch:

jobs:
  tag:
    name: Get latest tag
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
    runs-on: ubuntu-latest
    steps:
    
    - name: Download My-Expenses's source code
      uses: actions/checkout@v3.3.0
      with:
        repository: mtotschnig/MyExpenses
        fetch-depth: 0

    - name: Get tag within 7 days
      id: tag
      run: |
        TAG=$(git log --tags --simplify-by-decoration --pretty="format:%d" --since='7 days ago' | grep tag | head -n1 | cut -f 3 -d " " | cut -f 1 -d ")")
        echo "::set-output name=tag::$TAG"

  build:
    name: Build
    if: ${{ needs.tag.outputs.tag != '' }}
    runs-on: ubuntu-latest
    env:
      NDK_CCACHE: ${{ github.workspace }}/ccache
    steps:

    - name: Download My-Expenses's source code
      uses: actions/checkout@v3.3.0
      with:
        repository: theoware/OurExpenses
        token: ${{ secrets.GH_PAT }}

    - name: Install dependencies
      run: |
        wget https://github.com/patrickfav/uber-apk-signer/releases/download/v1.2.1/uber-apk-signer-1.2.1.jar -O uber-apk-signer.jar
        echo "47ae984df200afbae292d6f950e517afb445d3c902a1edc7717a82c513c5e772 uber-apk-signer.jar" | sha256sum -c

    - name: Setup Java JDK
      uses: actions/setup-java@v3.10.0
      with:
        java-version: 11
        distribution: temurin
        check-latest: true
        cache: gradle

    - name: Cache NDK licenses
      id: licenses-cache
      uses: actions/cache@v3.2.6
      with:
        path: ${{ github.workspace }}/ndk/licenses
        key: licenses-${{ github.sha }}
        restore-keys: licenses-

    - name: Install the android NDK
      if: steps.licenses-cache.outputs.cache-hit != 'true'
      run: |
        mkdir -p "${ANDROID_HOME}"
        curl https://dl.google.com/android/repository/commandlinetools-linux-8092744_latest.zip -o ${{ GITHUB.WORKSPACE }}/sdk.zip
        unzip -d "${ANDROID_HOME}/cmdline-tools/" sdk.zip
        mv "${ANDROID_HOME}/cmdline-tools/cmdline-tools" "${ANDROID_HOME}/cmdline-tools/latest"
        rm ${{ GITHUB.WORKSPACE }}/sdk.zip
        echo 'export PATH="${PATH}:${ANDROID_HOME}/cmdline-tools/latest/bin"' | tee -a ~/.bashrc
        source ~/.bashrc
        yes | ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --licenses --sdk_root="${ANDROID_HOME}"

    - name: Build
      run: |
        ./gradlew :myExpenses:packageExternReleaseUniversalApk

    - name: Sign the APKs
      if: github.event_name != 'pull_request'
      run: |
        echo "${{ secrets.ANDROID_KEYSTORE_BASE64}}" | base64 -d > keystore.jks
        java -jar uber-apk-signer.jar --allowResign --apks myExpenses/build/outputs/apk_from_bundle/externRelease/*.apk --ks keystore.jks --ksAlias "${{ secrets.ANDROID_KEYSTORE_ALIAS }}" --ksKeyPass "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" --ksPass "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" -o signed/

    - name: Remove Keystore
      if: always()
      run: rm -f keystore.jks

    - name: Upload signed APKs
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v3.1.2
      with:
        name: signed
        if-no-files-found: error
        path: |
          signed/

    - name: Upload the APK to Telegram
      if: github.event_name != 'pull_request'
      run: curl -F document=@"signed/myExpenses-extern-release-universal-aligned-signed.apk" https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendDocument?chat_id=${{ secrets.TELEGRAM_CHAT_ID }}
