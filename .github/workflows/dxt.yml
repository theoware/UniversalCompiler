# This script uses parts of:
# Script For Building Android arm64 Kernel
#
# Copyright (c) 2018-2021 Panchajanya1999 <rsk52959@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


name: DxT Build

on:
  push:
    paths: .github/workflows/dxt.yml

  workflow_dispatch:
    inputs: 
      ref:
        description: 'Ref to checkout'
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

    - name: Checkout kernel
      uses: actions/checkout@v3.4.0
      with:
        repository: DhineshCool/Dxt_payton
        ref: ${{ inputs.tags }} 

    - name: Checkout clang
      uses: actions/checkout@v3.4.0
      with:
        repository: theoware/troton-clang
        path: clang-llvm
        ref: 13

    - name: Checkout AnyKernel3
      uses: actions/checkout@v3.4.0
      with:
        repository: theoware/AnyKernel3
        path: AnyKernel3
        ref: payton_dxt

    - name: Correct names
      run: |
        cd ${{ GITHUB.WORKSPACE }}/clang-llvm/aarch64-linux-gnu/bin
        for file in *; do
            mv "$file" "aarch64-linux-gnu-${file%}"
            echo Moved "$file" to "aarch64-linux-gnu-${file%}"
        done
        cd ${{ GITHUB.WORKSPACE }}/clang-llvm/arm-linux-gnueabi/bin
        for file in *; do
            mv "$file" "arm-linux-gnueabi-${file%}"
            echo Moved "$file" to "arm-linux-gnueabi-${file%}"
        done
        cd ${{ GITHUB.WORKSPACE }}/clang-llvm/x86_64-pc-linux-gnu/bin
        for file in *; do
            mv "$file" "x86_64-pc-linux-gnu-${file%}"
            echo Moved "$file" to "x86_64-pc-linux-gnu-${file%}"
        done

    - name: Compile the kernel
      run: |
        # Basic variables
        KERNEL_DIR="$(pwd)"
        BASEDIR="$(basename "$KERNEL_DIR")"
        TOKEN=${{ secrets.TELEGRAM_TOKEN }}
        CHATID=${{ secrets.TELEGRAM_TO }}
        AUTHOR=theoware
        ARCH=arm64
        DEFCONFIG=dxt_defconfig
        FILES=Image.gz-dtb
        DEVICE="payton"
        MODEL="Motorola X4"
        LOG_DEBUG=0
        ZIPNAME=DxT

        # Get varaibles for Telegram message
        DISTRO=$(source /etc/os-release && echo "${NAME}")
        KBUILD_BUILD_HOST=$(uname -a | awk '{print $2}')
        CI_BRANCH=$(git rev-parse --abbrev-ref HEAD)
        KERVER=$(make kernelversion)
        export KBUILD_BUILD_HOST CI_BRANCH KERVER

        # Set a commit head
        COMMIT_HEAD=$(git log --oneline -1)

        # Set Date 
        DATE=$(TZ=Europe/Berlin date +"%Y%m%d-%T")

        #Set Toolchain dir
        TC_DIR=$KERNEL_DIR/clang-llvm

        KBUILD_BUILD_USER=$AUTHOR
        SUBARCH=$ARCH

        KBUILD_COMPILER_STRING=$("$TC_DIR"/bin/clang --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//')
        PATH="${TC_DIR}/bin:${TC_DIR}/aarch64-linux-gnu/bin:${TC_DIR}/arm-linux-gnueabi/bin:$PATH"

        BOT_MSG_URL="https://api.telegram.org/bot$TOKEN/sendMessage"
        BOT_BUILD_URL="https://api.telegram.org/bot$TOKEN/sendDocument"

        SERVER_URL="https://github.com/${{ GITHUB.REPOSITORY }}/actions/runs/${{ GITHUB.RUN_ID }}"

        export KBUILD_BUILD_USER ARCH SUBARCH PATH \
        KBUILD_COMPILER_STRING BOT_MSG_URL \
        BOT_BUILD_URL SERVER_URL TC_DIR \
        CROSS_COMPILE_ARM32 CROSS_COMPILE

        tg_post_msg() {
          curl -s -X POST "$BOT_MSG_URL" -d chat_id="$CHATID" \
          -d "disable_web_page_preview=true" \
          -d "parse_mode=html" \
          -d text="$1"
        }

        tg_post_build() {
          #Post MD5Checksum alongwith for easeness
          MD5CHECK=$(md5sum "$1" | cut -d' ' -f1)

          #Show the Checksum alongwith caption
          curl --progress-bar -F document=@"$1" "$BOT_BUILD_URL" \
          -F chat_id="$CHATID"  \
          -F "disable_web_page_preview=true" \
          -F "parse_mode=Markdown" \
          -F caption="$2 | *MD5 Checksum : *\`$MD5CHECK\`"
        }

        make clean && make mrproper && rm -rf out

        tg_post_msg "<b>$KBUILD_BUILD_VERSION CI Build Triggered</b>%0A<b>Host: </b><code>$DISTRO</code>%0A<b>Kernel Version : </b><code>$KERVER</code>%0A<b>Date : </b><code>$(TZ=Europe/Berlin date)</code>%0A<b>Device : </b><code>$MODEL [$DEVICE]</code>%0A<b>Pipeline Host : </b><code>$KBUILD_BUILD_HOST</code>%0A<b>Host Core Count : </b><code>$(nproc --all)</code>%0A<b>Compiler Used : </b><code>$KBUILD_COMPILER_STRING</code>%0a<b>Branch : </b><code>$CI_BRANCH</code>%0A<b>Top Commit : </b><code>$COMMIT_HEAD</code>%0A<a href='$SERVER_URL'>Link</a>"

        CROSS_COMPILE="aarch64-linux-gnu-"
        CROSS_COMPILE_ARM32="arm-linux-gnueabi-"
        export CROSS_COMPILE CROSS_COMPILE_ARM32

        make O=out $DEFCONFIG

        BUILD_START=$(date +"%s")

        make -j$(nproc --all) O=out \
                  ARCH=arm64 \
                  CC=clang \
        CLANG_TRIPLE=aarch64-linux-gnu- \
        CROSS_COMPILE_ARM32="arm-linux-gnueabi-" \
        CROSS_COMPILE=aarch64-linux-gnu-

        "${MAKE[@]}" 2>&1 | tee error.log

        BUILD_END=$(date +"%s")
        DIFF=$((BUILD_END - BUILD_START))

        if [ -f "$KERNEL_DIR"/out/arch/arm64/boot/$FILES ]
        then
          mv "$KERNEL_DIR"/out/arch/arm64/boot/$FILES AnyKernel3/$FILES
          cd AnyKernel3
          mv $FILES zImage
          rm -rf .git/
          rm -rf .github/
          rm -f README.md
          zip -r9 $ZIPNAME-$DEVICE-"$DATE" .

          ## Prepare a final zip variable
          ZIP_FINAL="$ZIPNAME-$DEVICE-$DATE"

          tg_post_build "$ZIP_FINAL.zip" "Build took : $((DIFF / 60)) minute(s) and $((DIFF % 60)) second(s)"
          cd ..
        else
            tg_post_build "error.log" "*Build failed to compile after $((DIFF / 60)) minute(s) and $((DIFF % 60)) seconds*"
        fi

        if [ $LOG_DEBUG = "1" ]
        then
          tg_post_build "error.log" "$CHATID" "Debug Mode Logs"
        fi

    - name: Create release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create -R ${{ GITHUB.REPOSITORY }} -d -t "$GITHUB_WORKFLOW on $(date "+%A, %d of %B of %Y")" "$(date "+%y.%m.%d.%H.%M.%S")" $(find AnyKernel3/ -type f -name "*-*-*.zip")
