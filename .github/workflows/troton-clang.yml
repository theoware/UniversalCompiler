name: Build & upload toolchain
on:
  push:
    paths: .github/workflows/troton-clang.yml
  schedule:
    - cron: '0 3 1 * *'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ref: [15, 16, latest]
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache

    steps:

      - name: Download scripts
        uses: actions/checkout@v3.6.0
        with:
          repository: ClangBuiltLinux/tc-build

      - name: Download Troton clang
        continue-on-error: true
        uses: actions/checkout@v3.6.0
        with:
          repository: theoware/troton-clang
          fetch-depth: 0
          path: c/
          ref: ${{ matrix.ref }}

      - name: Get old LLVM commit hash
        continue-on-error: true
        working-directory: c/
        id: oldllvm
        run: echo "::set-output name=hash::$(git log | head -n 7 | tail -n +7 | cut -c62- | xargs)"

      - name: Get old tc-build commit hash
        continue-on-error: true
        working-directory: c/
        id: oldtc
        run: echo "::set-output name=hash::$(git log | head -n 9 | tail -n +5 | cut -c72- | xargs)"

      - name: Download Troton clang
        uses: actions/checkout@v3.6.0
        with:
          repository: theoware/troton-clang
          fetch-depth: 0
          path: tc/
          ref: latest

      - name: Download LLVM
        if: matrix.ref != 'latest'
        uses: actions/checkout@v3.6.0
        with:
          path: llvm-project/
          repository: llvm/llvm-project
          ref: release/${{ matrix.ref }}.x
          clean: 0

      - name: Download LLVM
        if: matrix.ref == 'latest'
        uses: actions/checkout@v3.6.0
        with:
          path: llvm-project/
          repository: llvm/llvm-project
          ref: main
          clean: 0

      - name: Get new LLVM commit hash
        working-directory: llvm-project/
        id: newllvm
        run: echo "::set-output name=hash::$(git rev-parse HEAD)"

      - name: Get new tc-build commit hash
        id: newtc
        run: echo "::set-output name=hash::$(git rev-parse HEAD)"

      - name: Install dependencies
        if: steps.oldllvm.outputs.hash != steps.newllvm.outputs.hash && steps.oldtc.outputs.hash != steps.newtc.outputs.hash
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends bc bison ca-certificates ccache clang cmake curl file flex gcc g++ git libelf-dev libssl-dev lld jq make ninja-build patchelf python3 texinfo xz-utils zlib1g-dev

      - name: Cache ccache
        if: steps.oldllvm.outputs.hash != steps.newllvm.outputs.hash && steps.oldtc.outputs.hash != steps.newtc.outputs.hash
        id: ccache-cache
        uses: actions/cache@v3.3.1
        with:
          path: ${{ github.workspace }}/.ccache
          key: ccache-tc-${{ matrix.ref }}-${{ github.sha }}
          restore-keys: |
            ccache-tc-${{ matrix.ref }}
            ccache-tc-

      - name: Setup ccache
        if: steps.oldllvm.outputs.hash != steps.newllvm.outputs.hash && steps.oldtc.outputs.hash != steps.newtc.outputs.hash
        run: |
          sudo /usr/sbin/update-ccache-symlinks
          echo 'export PATH="/usr/lib/ccache:$PATH"' | tee -a ~/.bashrc
          echo 'export CCACHE_EXEC=/usr/bin/ccache' | tee -a ~/.bashrc
          echo 'export USE_CCACHE=1' | tee -a ~/.bashrc
          echo 'export PATH="$(pwd)/tc/bin:$PATH"' | tee -a ~/.bashrc
          source ~/.bashrc

      - name: Auth
        if: steps.oldllvm.outputs.hash != steps.newllvm.outputs.hash && steps.oldtc.outputs.hash != steps.newtc.outputs.hash && github.event_name != 'pull_request'
        run: |
          git config --global user.name "${{ secrets.GIT_AUTHOR_NAME }}"
          git config --global user.email "${{ secrets.GIT_AUTHOR_EMAIL }}"

      - name: Build LLVM
        if: steps.oldllvm.outputs.hash != steps.newllvm.outputs.hash && steps.oldtc.outputs.hash != steps.newtc.outputs.hash
        run: |
          ./build-llvm.py \
            --vendor-string "Troton" \
            --targets AArch64 AMDGPU ARM \
            --shallow-clone \
            --no-update \
            --show-build-commands \
            --defines LLVM_PARALLEL_COMPILE_JOBS=2 LLVM_PARALLEL_LINK_JOBS=2

      - name: Build binutils
        if: steps.oldllvm.outputs.hash != steps.newllvm.outputs.hash && steps.oldtc.outputs.hash != steps.newtc.outputs.hash
        run: |
          ./build-binutils.py \
          --targets arm aarch64 x86_64

      - name: Remove unused products
        if: steps.oldllvm.outputs.hash != steps.newllvm.outputs.hash && steps.oldtc.outputs.hash != steps.newtc.outputs.hash
        run: |
          rm -rf install/include
          rm -f install/lib/*.a install/lib/*.la

      - name: Strip remaining products
        if: steps.oldllvm.outputs.hash != steps.newllvm.outputs.hash && steps.oldtc.outputs.hash != steps.newtc.outputs.hash
        run: |
          for f in $(find install -type f -exec file {} \; | grep 'not stripped' | awk '{print $1}'); do
            strip ${f: : -1}
          done

      - name: Set executable rpaths so setting LD_LIBRARY_PATH isn't necessary
        if: steps.oldllvm.outputs.hash != steps.newllvm.outputs.hash && steps.oldtc.outputs.hash != steps.newtc.outputs.hash
        run: |
          for bin in $(find install -mindepth 2 -maxdepth 3 -type f -exec file {} \; | grep 'ELF .* interpreter' | awk '{print $1}'); do
            # Remove last character from file output (':')
            bin="${bin: : -1}"
            echo "$bin"
            patchelf --set-rpath '$ORIGIN/../lib' "$bin"
          done

      - name: Delete large files
        if: steps.oldllvm.outputs.hash != steps.newllvm.outputs.hash && steps.oldtc.outputs.hash != steps.newtc.outputs.hash
        run: |
          find . -type f -size +100M -delete
          find . -type f -name *.git -size +90M -delete

      - name: Generate info
        if: steps.oldllvm.outputs.hash != steps.newllvm.outputs.hash && steps.oldtc.outputs.hash != steps.newtc.outputs.hash
        env:
          GH_BUILD_REPO: theoware/UniversalCompiler
        id: info
        run: |
          # Generate build info
          REL_DATE="$(date "+%Y%m%d")"
          echo "::set-output name=rel_date::$(date "+%Y%m%d")" # ISO 8601 format
          echo "::set-output name=clang_version::$(install/bin/clang --version | head -n1 | cut -d' ' -f4)"
          echo "::set-output name=binutils_ver::$(ls | grep "^binutils-" | sed "s/binutils-//g")"

          # Generate release info
          echo "::set-output name=builder_commit::$(git rev-parse HEAD)"
          pushd llvm-project
          llvm_commit="$(git rev-parse HEAD)"
          echo "::set-output name=short_llvm_commit::$(cut -c-7 <<< $llvm_commit)"
          popd

          echo "::set-output name=llvm_commit_url::$(echo "https://github.com/llvm/llvm-project/commit/$llvm_commit")"
          echo "::set-output name=build_desc::$(echo "[$REL_DATE build](https://github.com/$GH_BUILD_REPO/actions/runs/${{ GITHUB.RUN_ID }})")"

      - name: Clone git repo
        if: steps.oldllvm.outputs.hash != steps.newllvm.outputs.hash && steps.oldtc.outputs.hash != steps.newtc.outputs.hash
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          GH_REL_REPO: theoware/troton-clang
          GH_USER: theoware
        run: git clone "https://$GH_USER:$GH_PAT@github.com/$GH_REL_REPO" rel_repo

      - name: Delete remote branch
        if: steps.oldllvm.outputs.hash != steps.newllvm.outputs.hash && steps.oldtc.outputs.hash != steps.newtc.outputs.hash
        env:
          CLANG_VERSION: ${{ steps.info.outputs.clang_version }}
        working-directory: rel_repo
        continue-on-error: true
        run: git push origin -d ${{ matrix.ref }}

      - name: Create new branch
        if: steps.oldllvm.outputs.hash != steps.newllvm.outputs.hash && steps.oldtc.outputs.hash != steps.newtc.outputs.hash
        env:
          CLANG_VERSION: ${{ steps.info.outputs.clang_version }}
        working-directory: rel_repo
        run: git branch ${{ matrix.ref }} main

      - name: Checkout new branch
        if: steps.oldllvm.outputs.hash != steps.newllvm.outputs.hash && steps.oldtc.outputs.hash != steps.newtc.outputs.hash
        env:
          CLANG_VERSION: ${{ steps.info.outputs.clang_version }}
        working-directory: rel_repo
        run: git checkout ${{ matrix.ref }}

      - name: Remove old files
        if: steps.oldllvm.outputs.hash != steps.newllvm.outputs.hash && steps.oldtc.outputs.hash != steps.newtc.outputs.hash
        working-directory: rel_repo
        run: rm -rf *

      - if: steps.oldllvm.outputs.hash != steps.newllvm.outputs.hash && steps.oldtc.outputs.hash != steps.newtc.outputs.hash
        run: tree

      - name: Copy install
        if: steps.oldllvm.outputs.hash != steps.newllvm.outputs.hash && steps.oldtc.outputs.hash != steps.newtc.outputs.hash
        working-directory: rel_repo
        run: cp -r ../install/* .

      - name: Keep files that arent part of the toolchain itself
        if: steps.oldllvm.outputs.hash != steps.newllvm.outputs.hash && steps.oldtc.outputs.hash != steps.newtc.outputs.hash
        working-directory: rel_repo
        run: git checkout README.md LICENSE

      - name: Create commit
        if: steps.oldllvm.outputs.hash != steps.newllvm.outputs.hash && steps.oldtc.outputs.hash != steps.newtc.outputs.hash && github.event_name != 'pull_request'
        env:
          BINUTILS_VER: ${{ steps.info.outputs.binutils_ver }}
          BUILDER_COMMIT: ${{ steps.info.outputs.builder_commit }}
          LLVM_COMMIT_URL: ${{ steps.info.outputs.llvm_commit_url }}
          REL_DATE: ${{ steps.info.outputs.rel_date }}
        working-directory: rel_repo
        run: |
          git add .
          git commit -am "Update to $REL_DATE build

          LLVM commit: $LLVM_COMMIT_URL
          binutils version: $BINUTILS_VER
          Builder commit: https://github.com/ClangBuiltLinux/tc-build/commit/$BUILDER_COMMIT"

      - name: Push
        if: steps.oldllvm.outputs.hash != steps.newllvm.outputs.hash && steps.oldtc.outputs.hash != steps.newtc.outputs.hash && github.event_name != 'pull_request'
        env:
          CLANG_VERSION: ${{ steps.info.outputs.clang_version }}
        working-directory: rel_repo
        run: git push --set-upstream origin ${{ matrix.ref }}

      - name: Send Telegram notification
        if: steps.oldllvm.outputs.hash != steps.newllvm.outputs.hash && steps.oldtc.outputs.hash != steps.newtc.outputs.hash && github.event_name != 'pull_request'
        env:
          BUILD_DESC: ${{ steps.info.outputs.build_desc }}
          CLANG_VERSION: ${{ steps.info.outputs.clang_version }}
          GH_REL_REPO: theoware/troton-clang
          LLVM_COMMIT_URL: ${{ steps.info.outputs.llvm_commit_url }}
          REL_DATE: ${{ steps.info.outputs.rel_date }}
          SHORT_LLVM_COMMIT: ${{ steps.info.outputs.short_llvm_commit }}
        run: |
          # Helper function to send a Telegram message
          function tg_send() {
              local msg_type="$1"
              shift

              local args=()
              for arg in "$@"; do
                  args+=(-F "$arg")
              done

              curl -sf --form-string chat_id="${{ secrets.TELEGRAM_TO }}" \
                  "${args[@]}" \
                  "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/send$msg_type" \
                  > /dev/null
          }
          tg_send Message parse_mode=Markdown disable_web_page_preview=true text="$BUILD_DESC on LLVM commit [$SHORT_LLVM_COMMIT]($LLVM_COMMIT_URL) with clang version $CLANG_VERSION is now available: [Git repository](https://github.com/$GH_REL_REPO/tree/${{ matrix.ref }})"
