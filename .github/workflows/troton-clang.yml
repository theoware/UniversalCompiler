name: Build & upload toolchain
on:
  push:
    paths: .github/workflows/troton-clang.yml
  schedule:
    - cron: '0 3 * * 0'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ref: [llvmorg-3, llvmorg-4, llvmorg-5, llvmorg-6, llvmorg-7, llvmorg-10, llvmorg-11, llvmorg-12, llvmorg-13, llvmorg-14]

    steps:
      - name: Download scripts
        uses: actions/checkout@main
        with:
          repository: ClangBuiltLinux/tc-build

      - name: Download LLVM
        uses: actions/checkout@main
        with:
          path: llvm-project/
          repository: llvm/llvm-project
          fetch-depth: 0

      - name: Get ref
        working-directory: llvm-project/
        id: get-ref
        run: echo "::set-output name=ref::$(git for-each-ref refs/tags --format='%(refname)' --sort=-taggerdate  | cut -c11- | grep ${{ matrix.ref }} | head -n 1)"

      - name: Checkout ref
        if: matrix.ref != 14
        working-directory: llvm-project/
        run: git checkout ${{ steps.get-ref.outputs.ref }}

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install -y --no-install-recommends bc bison ca-certificates clang cmake curl file flex gcc g++ git libelf-dev libssl-dev lld jq make ninja-build patchelf python3 texinfo xz-utils zlib1g-dev

      - name: Auth
        run: |
          git config --global user.name "${{ secrets.GIT_AUTHOR_NAME }}"
          git config --global user.email "${{ secrets.GIT_AUTHOR_EMAIL }}"

      - name: Build LLVM
        run: |
          ./build-llvm.py \
            --clang-vendor "Troton" \
            --targets "ARM;AArch64;X86" \
            --shallow-clone \
            --no-update \
            --show-build-commands \
            --no-ccache

      - name: Build binutils
        run: |
          ./build-binutils.py \
          --targets arm aarch64 x86_64

      - name: Remove unused products
        run: |
          rm -rf install/include
          rm -f install/lib/*.a install/lib/*.la

      - name: Strip remaining products
        run: |
          for f in $(find install -type f -exec file {} \; | grep 'not stripped' | awk '{print $1}'); do
            strip ${f: : -1}
          done

      - name: Set executable rpaths so setting LD_LIBRARY_PATH isn't necessary
        run: |
          for bin in $(find install -mindepth 2 -maxdepth 3 -type f -exec file {} \; | grep 'ELF .* interpreter' | awk '{print $1}'); do
            # Remove last character from file output (':')
            bin="${bin: : -1}"
            echo "$bin"
            patchelf --set-rpath '$ORIGIN/../lib' "$bin"
          done

      - name: Upload install dir
        uses: actions/upload-artifact@main
        with:
          name: install
          path: install/
          if-no-files-found: error

      - name: Upload
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          TELEGRAM_TO: ${{ secrets.TELEGRAM_TO }}
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          GH_USER: theoware
          GH_REL_REPO: theoware/troton-clang
          GH_BUILD_REPO: theoware/tc-build
          GH_RUN_ID: ${{ GITHUB.RUN_ID }}
        run: |
          # Helper function to send a Telegram message
          function tg_send() {
              local msg_type="$1"
              shift

              local args=()
              for arg in "$@"; do
                  args+=(-F "$arg")
              done

              curl -sf --form-string chat_id="$TELEGRAM_TO" \
                  "${args[@]}" \
                  "https://api.telegram.org/bot$TELEGRAM_TOKEN/send$msg_type" \
                  > /dev/null
          }

          # Generate build info
          rel_date="$(date "+%Y%m%d")" # ISO 8601 format
          rel_friendly_date="$(date "+%B %-d, %Y")" # "Month day, year" format
          clang_version="$(install/bin/clang --version | head -n1 | cut -d' ' -f4)"

          # Generate release info
          builder_commit="$(git rev-parse HEAD)"
          pushd llvm-project
          llvm_commit="$(git rev-parse HEAD)"
          short_llvm_commit="$(cut -c-8 <<< $llvm_commit)"
          popd

          llvm_commit_url="https://github.com/llvm/llvm-project/commit/$llvm_commit"
          binutils_ver="$(ls | grep "^binutils-" | sed "s/binutils-//g")"

          # Delete large files
          find . -type f -size +100M -delete
          find . -type f -name *.git -size +90M -delete

          # Update Git repository
          git clone "https://$GH_USER:$GH_PAT@github.com/$GH_REL_REPO" rel_repo
          pushd rel_repo
          git branch $clang_version main
          git checkout $clang_version
          rm -rf *
          cp -r ../install/* .
          # Keep files that aren't part of the toolchain itself
          git checkout README.md LICENSE
          git add .
          git commit -am "Update to $rel_date build

          LLVM commit: $llvm_commit_url
          binutils version: $binutils_ver
          Builder commit: https://github.com/$GH_BUILD_REPO/commit/$builder_commit"
          git push --set-upstream origin $clang_version
          popd

          # Send Telegram notification
          set +u  # we're checking potentially unset variables here
          if [[ -n "$TELEGRAM_TO" ]] && [[ -n "$TELEGRAM_TOKEN" ]]; then
              if [[ -n "$GH_RUN_ID" ]]; then
                  build_desc="[$rel_date build](https://github.com/$GH_BUILD_REPO/actions/runs/$GH_RUN_ID)"
              else
                  build_desc="*$rel_date build*"
              fi
              set -u

              tg_send Message parse_mode=Markdown disable_web_page_preview=true text="$build_desc on LLVM commit [$short_llvm_commit]($llvm_commit_url) with clang version $clang_version is now available: [Git repository](https://github.com/$GH_REL_REPO/tree/$clang_version)"
          fi
