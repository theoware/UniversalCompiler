name: LSPosed Build

on:
  push:
    paths: .github/workflows/LSPosed.yml
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@main
      with:
        repository: LSPosed/LSPosed
        submodules: 'recursive'
        fetch-depth: 0

    - name: set up JDK 11
      uses: actions/setup-java@main
      with:
        java-version: 11
        distribution: temurin

    - name: Cache Gradle Dependencies
      uses: actions/cache@main
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          !~/.gradle/caches/build-cache-*
        key: gradle-deps-core-${{ hashFiles('**/build.gradle.kts') }}
        restore-keys: |
          gradle-deps

    - name: Cache Gradle Build
      uses: actions/cache@main
      with:
        path: |
          ~/.gradle/caches/build-cache-*
        key: gradle-builds-core-${{ github.sha }}
        restore-keys: |
          gradle-builds

    - name: Cache ccache
      uses: actions/cache@main
      with:
        path: ~/.ccache
        key: ccache-cache-${{ github.sha }}
        restore-keys: ccache-cache-

    - name: Install ccache
      run: |
        sudo apt-get install -y ccache
        ccache -o max_size=1G
        ccache -o hash_dir=false
        ccache -o compiler_check='%compiler% -dumpmachine; %compiler% -dumpversion'
        ccache -zp

    - name: Build with Gradle
      env:
        NDK_CCACHE: ccache
      run: |
        [ $(du -s ~/.gradle/wrapper | awk '{ print $1 }') -gt 250000 ] && rm -rf ~/.gradle/wrapper/* || true
        find ~/.gradle/caches -exec touch -d "2 days ago" {} + || true
        echo 'org.gradle.caching=true' >> gradle.properties
        echo 'org.gradle.parallel=true' >> gradle.properties
        echo 'org.gradle.vfs.watch=true' >> gradle.properties
        echo 'org.gradle.jvmargs=-Xmx3072m' >> gradle.properties
        echo 'android.native.buildOutput=verbose' >> gradle.properties
        ./gradlew zipAll
        ccache -s

    - name: Prepare artifact
      if: success()
      id: prepareArtifact
      run: |
        riruReleaseName=`ls core/release/LSPosed-v*-riru-release.zip | awk -F '(/|.zip)' '{print $3}'` && echo "::set-output name=riruReleaseName::$riruReleaseName"
        riruDebugName=`ls core/release/LSPosed-v*-riru-debug.zip | awk -F '(/|.zip)' '{print $3}'` && echo "::set-output name=riruDebugName::$riruDebugName"
        zygiskReleaseName=`ls core/release/LSPosed-v*-zygisk-release.zip | awk -F '(/|.zip)' '{print $3}'` && echo "::set-output name=zygiskReleaseName::$zygiskReleaseName"
        zygiskDebugName=`ls core/release/LSPosed-v*-zygisk-debug.zip | awk -F '(/|.zip)' '{print $3}'` && echo "::set-output name=zygiskDebugName::$zygiskDebugName"
        unzip core/release/LSPosed-v*-riru-release.zip -d LSPosed-riru-release
        unzip core/release/LSPosed-v*-riru-debug.zip -d LSPosed-riru-debug
        unzip core/release/LSPosed-v*-zygisk-release.zip -d LSPosed-zygisk-release
        unzip core/release/LSPosed-v*-zygisk-debug.zip -d LSPosed-zygisk-debug

    - name: Upload riru release
      uses: actions/upload-artifact@main
      with:
        name: ${{ steps.prepareArtifact.outputs.riruReleaseName }}
        path: './LSPosed-riru-release/*'

    - name: Upload riru debug
      uses: actions/upload-artifact@main
      with:
        name: ${{ steps.prepareArtifact.outputs.riruDebugName }}
        path: './LSPosed-riru-debug/*'

    - name: Upload zygisk release
      uses: actions/upload-artifact@main
      with:
        name: ${{ steps.prepareArtifact.outputs.zygiskReleaseName }}
        path: './LSPosed-zygisk-release/*'

    - name: Upload zygisk debug
      uses: actions/upload-artifact@main
      with:
        name: ${{ steps.prepareArtifact.outputs.zygiskDebugName }}
        path: './LSPosed-zygisk-debug/*'

    - name: Upload mappings
      uses: actions/upload-artifact@main
      with:
        name: mappings
        path: |
          core/build/outputs/mapping/release
          app/build/outputs/mapping/release

    - name: Send fail message
      if: ${{ failure() }}
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ GITHUB.WORKFLOW }} failed

    - name: Send suceed message
      if: ${{ !failure() }}
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ GITHUB.WORKFLOW }} succeeded
