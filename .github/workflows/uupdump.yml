name: UUP dump downloader

on:
  workflow_dispatch:
    inputs:
      build:
        required: true
      lang:
        required: true
        default: de-de
      edition:
        required: true
        default: PROFESSIONAL

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      tempScript: "aria2_script.0001.txt"
      destDir: "UUPs"
    steps:
      - uses: actions/checkout@v3.3.0

      - name: Install dependencies
        run: |
          sudo apt-get install aria2 cabextract wimtools chntpw genisoimage
          wget https://raw.githubusercontent.com/uup-dump/converter/master/convert.sh

      - name: Retrieve aria2 script
        run: |
          aria2c --no-conf -o"$tempScript" --allow-overwrite=true --auto-file-renaming=false "https://uupdump.net/get.php?id=${{ github.event.inputs.build }}&pack=${{ github.event.inputs.lang }}&edition=${{ github.event.inputs.edition }}&aria2=2"

      - name: Download files
        run: |
          aria2c --no-conf --log-level=info --log="aria2_download.log" -x16 -s16 -j5 -c -R -d"$destDir" -i"$tempScript"

      - name: Convert
        run: |
          chmod +x ./convert.sh
          ./convert.sh wim "$destDir" 0

      - name: Cache telegram-bot-api
        id: telegram-bot-api
        uses: actions/cache@v3.2.6
        with:
          path: build/telegram-bot-api
          key: telegram-bot-api

      - name: Install dependencies
        if: steps.telegram-bot-api.outputs.cache-hit != 'true' 
        run: |
          sudo apt-get update || sudo apt-get update
          sudo apt-get install -y ccache gperf cmake

      - name: Setup ccache
        if: steps.telegram-bot-api.outputs.cache-hit != 'true' 
        run: |
          sudo /usr/sbin/update-ccache-symlinks
          echo 'export PATH="/usr/lib/ccache:$PATH"' | tee -a ~/.bashrc
          echo 'export CCACHE_EXEC=/usr/bin/ccache' | tee -a ~/.bashrc
          echo 'export USE_CCACHE=1' | tee -a ~/.bashrc
          source ~/.bashrc

      - name: Checkout Telegram bot API
        if: steps.telegram-bot-api.outputs.cache-hit != 'true' 
        uses: actions/checkout@v3.3.0
        with:
          repository: tdlib/telegram-bot-api
          submodules: recursive

      - name: Compile the Telegram bot API
        if: steps.telegram-bot-api.outputs.cache-hit != 'true' 
        run: |
          mkdir -p build
          pushd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          cmake --build .
          popd

      - name: Get file name
        id: iso
        run: |
          echo "::set-output name=name::$(find * -name *.ISO -type f)"

      - name: Split files
        run: |
          split --bytes=1900000000 --numeric-suffixes $(find * -name *.ISO -type f) $(find * -name *.ISO -type f)

      - name: Upload the splited ISO to Telegram
        run: |
          ./build/telegram-bot-api --api-id=${{ secrets.TELEGRAM_API_ID }} --api-hash=${{ secrets.TELEGRAM_API_HASH }} &
          if [ -f ${{ steps.iso.outputs.name }}00 ]; 
          then
            curl -F document=@"./${{ steps.iso.outputs.name }}00" http://localhost:8081/bot${{ secrets.TELEGRAM_TOKEN }}/sendDocument?chat_id=${{ secrets.TELEGRAM_CHAT_ID }}
          fi
          if [ -f ${{ steps.iso.outputs.name }}01 ]; 
          then
            curl -F document=@"./${{ steps.iso.outputs.name }}01" http://localhost:8081/bot${{ secrets.TELEGRAM_TOKEN }}/sendDocument?chat_id=${{ secrets.TELEGRAM_CHAT_ID }}
          fi
          if [ -f ${{ steps.iso.outputs.name }}02 ]; 
          then
            curl -F document=@"./${{ steps.iso.outputs.name }}02" http://localhost:8081/bot${{ secrets.TELEGRAM_TOKEN }}/sendDocument?chat_id=${{ secrets.TELEGRAM_CHAT_ID }}
          fi
          if [ -f ${{ steps.iso.outputs.name }}03 ]; 
          then
            curl -F document=@"./${{ steps.iso.outputs.name }}03" http://localhost:8081/bot${{ secrets.TELEGRAM_TOKEN }}/sendDocument?chat_id=${{ secrets.TELEGRAM_CHAT_ID }}
          fi
