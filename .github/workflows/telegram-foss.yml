name: Telegram-FOSS

on:
  push:
    paths: .github/workflows/telegram-foss.yml

  workflow_dispatch:
    inputs: 
      ref:
        description: 'Ref to checkout'
        required: false

jobs:
  boringssl:
    name: boringSSL
    runs-on: ubuntu-latest
    env:
      NDK_CCACHE: ${{ github.workspace }}/ccache
      NDK: /usr/local/lib/android/sdk/ndk/21.4.7075529
    steps:

    - name: Download Telegram-FOSS's source code
      uses: actions/checkout@v3.3.0
      with:
        repository: Telegram-FOSS-Team/Telegram-FOSS
        submodules: recursive

    - name: Get hashes
      working-directory: TMessagesProj/jni
      id: hash
      run: |
        pushd boringssl
        echo "::set-output name=boringssl::$(git rev-parse HEAD)"
        popd

    - name: Cache boringSSL
      id: boringssl-cache
      uses: actions/cache@v3.2.6
      with:
        path: |
          TMessagesProj/jni/boringssl/build/
        key: boringssl-telegram-${{ steps.hash.outputs.boringssl }}

    - name: Install dependencies
      if: steps.boringssl-cache.outputs.cache-hit != 'true'
      run: |
        sudo apt-get update || sudo apt-get update
        sudo apt-get install -y ninja-build golang-go

    - name: Install the android NDK
      if: steps.licenses-cache.outputs.cache-hit != 'true' && steps.boringssl-cache.outputs.cache-hit != 'true'
      run: |
        yes | ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --licenses --sdk_root="${ANDROID_HOME}"

    - name: Init submodules if cache didn't hit
      if: steps.boringssl-cache.outputs.cache-hit != 'true'
      run: git submodule update --init --recursive --rebase --force

    - name: Add API keys
      if: steps.boringssl-cache.outputs.cache-hit != 'true'
      run: echo -e 'APP_ID = 12834\nAPP_HASH = c84d9229db1d6be95c067b02b126352c' > API_KEYS

    - name: Build Telegram-FOSS fake
      if: steps.boringssl-cache.outputs.cache-hit != 'true'
      run: |
        ./gradlew --no-daemon tasks

    - name: Patch BoringSSL
      working-directory: TMessagesProj/jni
      run: ./patch_boringssl.sh

    - name: Build BoringSSL
      if: steps.boringssl-cache.outputs.cache-hit != 'true'
      working-directory: TMessagesProj/jni
      env:
        NINJA_PATH: /usr/bin/ninja
      run: ./build_boringssl.sh

    - name: Upload the Build Artifact
      uses: actions/upload-artifact@v3.1.2
      with:
        name: boringssl
        path: TMessagesProj/jni/boringssl/build
        if-no-files-found: error

  ffmpeg:
    name: FFmpeg
    runs-on: ubuntu-latest
    env:
      NDK_CCACHE: ${{ github.workspace }}/ccache
      NDK: /usr/local/lib/android/sdk/ndk/21.4.7075529
    steps:

    - name: Download Telegram-FOSS's source code
      uses: actions/checkout@v3.3.0
      with:
        repository: Telegram-FOSS-Team/Telegram-FOSS
        submodules: recursive

    - name: Get hashes
      working-directory: TMessagesProj/jni
      id: hash
      run: |
        pushd ffmpeg
        echo "::set-output name=ffmpeg::$(git rev-parse HEAD)"
        popd

    - name: Cache FFmpeg
      id: ffmpeg-cache
      uses: actions/cache@v3.2.6
      with:
        path: |
          TMessagesProj/jni/ffmpeg/build/
        key: ffmpeg-telegram-${{ steps.hash.outputs.ffmpeg }}

    - name: Install dependencies
      if: steps.ffmpeg-cache.outputs.cache-hit != 'true'
      run: |
        sudo apt-get update || sudo apt-get update
        sudo apt-get install -y ninja-build golang-go

    - name: Install the android NDK
      if: steps.licenses-cache.outputs.cache-hit != 'true' && steps.ffmpeg-cache.outputs.cache-hit != 'true'
      run: |
        yes | ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --licenses --sdk_root="${ANDROID_HOME}"

    - name: Add API keys
      if: steps.ffmpeg-cache.outputs.cache-hit != 'true'
      run: echo -e 'APP_ID = 12834\nAPP_HASH = c84d9229db1d6be95c067b02b126352c' > API_KEYS

    - name: Init submodules if cache didn't hit
      if: steps.boringssl-cache.outputs.cache-hit != 'true'
      run: git submodule update --init --recursive --rebase --force

    - name: Build Telegram-FOSS fake
      if: steps.ffmpeg-cache.outputs.cache-hit != 'true'
      run: |
        ./gradlew --no-daemon tasks

    - name: Build FFmpeg with clang
      if: steps.ffmpeg-cache.outputs.cache-hit != 'true'
      working-directory: TMessagesProj/jni
      run: ./build_ffmpeg_clang.sh

    - name: Patch FFmpeg
      if: steps.ffmpeg-cache.outputs.cache-hit != 'true'
      working-directory: TMessagesProj/jni
      run: ./patch_ffmpeg.sh

    - name: Upload the Build Artifact
      uses: actions/upload-artifact@v3.1.2
      with:
        name: ffmpeg
        path: TMessagesProj/jni/ffmpeg/build
        if-no-files-found: error

  libvpx:
    name: libvpx
    runs-on: ubuntu-latest
    env:
      NDK_CCACHE: ${{ github.workspace }}/ccache
      NDK: /usr/local/lib/android/sdk/ndk/21.4.7075529
    steps:

    - name: Download Telegram-FOSS's source code
      uses: actions/checkout@v3.3.0
      with:
        repository: Telegram-FOSS-Team/Telegram-FOSS
        submodules: recursive

    - name: Get hashes
      working-directory: TMessagesProj/jni
      id: hash
      run: |
        pushd libvpx
        echo "::set-output name=libvpx::$(git rev-parse HEAD)"
        popd

    - name: Cache libvpx
      id: libvpx-cache
      uses: actions/cache@v3.2.6
      with:
        path: |
          TMessagesProj/jni/libvpx/build/
          !TMessagesProj/jni/libvpx/build/make
        key: libvpx-telegram-${{ steps.hash.outputs.libvpx }}

    - name: Install dependencies
      if: steps.libvpx-cache.outputs.cache-hit != 'true'
      run: |
        sudo apt-get update || sudo apt-get update
        sudo apt-get install -y ninja-build golang-go yasm

    - name: Install the android NDK
      if: steps.licenses-cache.outputs.cache-hit != 'true' && steps.libvpx-cache.outputs.cache-hit != 'true'
      run: |
        yes | ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --licenses --sdk_root="${ANDROID_HOME}"

    - name: Add API keys
      if: steps.libvpx-cache.outputs.cache-hit != 'true'
      run: echo -e 'APP_ID = 12834\nAPP_HASH = c84d9229db1d6be95c067b02b126352c' > API_KEYS

    - name: Init submodules if cache didn't hit
      if: steps.boringssl-cache.outputs.cache-hit != 'true'
      run: git submodule update --init --recursive --rebase --force

    - name: Build Telegram-FOSS fake
      if: steps.libvpx-cache.outputs.cache-hit != 'true'
      run: |
        ./gradlew --no-daemon tasks

    - name: Build libvpx with clang
      if: steps.libvpx-cache.outputs.cache-hit != 'true'
      working-directory: TMessagesProj/jni
      run: ./build_libvpx_clang.sh

    - name: Upload the Build Artifact
      uses: actions/upload-artifact@v3.1.2
      with:
        name: libvpx
        path: TMessagesProj/jni/libvpx/build
        if-no-files-found: error

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [boringssl, ffmpeg, libvpx]
    env:
      NDK_CCACHE: ${{ github.workspace }}/ccache
    steps:

    - name: Download Telegram-FOSS's source code
      uses: actions/checkout@v3.3.0
      with:
        repository: Telegram-FOSS-Team/Telegram-FOSS
        submodules: recursive

    - name: Install dependencies
      run: |
        sudo apt-get update || sudo apt-get update
        sudo apt-get install -y ninja-build golang-go
        wget -q https://github.com/patrickfav/uber-apk-signer/releases/download/v1.2.1/uber-apk-signer-1.2.1.jar -O uber-apk-signer.jar
        echo "47ae984df200afbae292d6f950e517afb445d3c902a1edc7717a82c513c5e772 uber-apk-signer.jar" | sha256sum -c

    - name: Setup Java JDK
      uses: actions/setup-java@v3.10.0
      with:
        java-version: 11
        distribution: temurin
        check-latest: true
        cache: gradle

    - name: Install the android NDK
      if: steps.licenses-cache.outputs.cache-hit != 'true'
      run: |
        yes | ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --licenses --sdk_root="${ANDROID_HOME}"

    - name: Download the boringssl Build Artifact
      uses: actions/download-artifact@v3.0.2
      with:
        name: boringssl
        path: TMessagesProj/jni/boringssl/build

    - name: Download the FFmpeg Build Artifact
      uses: actions/download-artifact@v3.0.2
      with:
        name: ffmpeg
        path: TMessagesProj/jni/ffmpeg/build

    - name: Download the libvpx Build Artifact
      uses: actions/download-artifact@v3.0.2
      with:
        name: libvpx
        path: TMessagesProj/jni/libvpx/build

    - name: Patch BoringSSL
      working-directory: TMessagesProj/jni
      run: ./patch_boringssl.sh

    - name: Add API keys
      run: echo -e 'APP_ID = 12834\nAPP_HASH = c84d9229db1d6be95c067b02b126352c' > API_KEYS

    - name: Build Telegram-FOSS
      run: |
        ./gradlew --no-daemon assembleAfatRelease

    - name: Sign the APKs
      if: github.event_name != 'pull_request'
      run: |
        echo "${{ secrets.ANDROID_KEYSTORE_BASE64}}" | base64 -d > keystore.jks
        java -jar uber-apk-signer.jar --allowResign --apks TMessagesProj*/build/outputs/apk/*/* --ks keystore.jks --ksAlias "${{ secrets.ANDROID_KEYSTORE_ALIAS }}" --ksKeyPass "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" --ksPass "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" -o signed/

    - name: Remove Keystore
      if: always()
      run: rm -f keystore.jks

    - name: Upload signed APKs
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v3.1.2
      with:
        name: signed
        path: |
          signed/
